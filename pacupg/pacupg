#!/usr/bin/env bash
#
# Written by: crossroads1112
#
# Purpose: Take btrfs snapshots before and after a pacman -Syu
#
# Requirements: Btrfs (obviously), snapper, sudo, rsync, GNU coreutils (sed, grep etc.), package-query (optional) and that your user is added into the ALLOW_USERS variable of your snapper config (/etc/snapper/configs/yourconfigname). This script assumes your snapper config is called 'root'. If needed, change this in the snpr_cnfg variable below
#
#
# What this script does:
#
# Wraps package upgrade in btrfs snapshots
# If /boot is on a separate partition, and the kernel is being upgraded, it backs up /boot (command line flag also available)
# Log of all errors and a list of upgraded packages (with version numbers pre and post upgrade)
# If upgrade is interupted, offers to delete pre snapshot
# Optionally upgrades AUR packages
#
###############################################################
snpr_cnfg=root
bootbackupdir="/var/local/boot-backup/"
log_path="/var/local/log/pacupg/"
date=$(date "+%Y-%m-%d-%H%M%S")
log_file="${log_path}/pacupg_${date}.log"
helpmsg="${0##*/}: [OPTIONS]\n\nOPTIONS:\n -h\t\tPrint this help message\n -b\t\tForce backup of boot to ${bootbackupdir}\n -a\t\tUpgrade AUR packages as well (experimental) (requires pacaur)\n -r\t\tRollback previous upgrades"

pacaurconfig=/etc/xdg/pacaur/config

msg(){
    echo -en "\e[0;32m$(tput bold)> ${@}$(tput sgr0)\e[0m"
}

fscheck(){
    # Make sure root is btrfs
    if [[ $(mount | grep ' / ' | awk -F'type ' '{print $2}' | cut -d' ' -f1) != "btrfs" ]] > /dev/null; then
        msg "Root not btrfs. Aborting\n"
        exit 1
    fi
}
bootbackup(){
    if mount | grep -q /boot && [[ $boot == 1 ]] || [[ $boot == 2 ]] ; then
        [[ ! -d $bootbackupdir ]] && sudo mkdir -p $bootbackupdir # Make backup directory if it does not exist
        msg "Backing up /boot\n" 
        if sudo rsync -av --delete /boot/ $bootbackupdir > /dev/null 2> >(sudo tee -a $log_file); then # Copy contents of /boot to directory set in $bootbackupdir and delete any extraneous files in the latter directory
            msg "Done\n"
        else 
            echo "Errors from bootbackup: " >> $log_file
            msg "Boot backup failed. Aborting\n" | tee -a $log_file 1>&2
        fi
    fi
}
aur(){
    msg "This feature is still experimental\n"
    msg "Beginning AUR upgrade\n"
    if ! which pacaur > /dev/null; then
        msg "pacaur not found. Aborting"
        exit 1
    fi
    source $pacaurconfig

    if [[ -z $builddir ]]; then
        builddir=/tmp/pacaurtmp-$USER
    fi

    if [[ -z $clean || $clean != "false" ]]; then # Make sure clean option is off in pacaur
        sudo sed -i '/clean=/d' $pacaurconfig && echo "clean=false" | sudo tee -a $pacaurconfig
    fi
    msg "Checking for updates...\n"
    aurpkgs=$(pacaur --color never -k | awk -F'aur  ' '{print $2}')
    if [[ -z $aurpkgs ]]; then
        msg "No AUR packages to upgrade.\n"
        return 2
    fi
    pacaur -cc
    #if 
    pacaur -Syuw #; then
    if [[ -n $(find $builddir -type f -regex ".*\.pkg\.\(tar\|tar\.[gx]z\)") ]]; then
            eval "in_block=1"
            pre=$(snapper create --type=pre --cleanup-algorithm=number --print-number --description="AUR upgrade") #Take snapshot and store snapshot number in $pre
            msg "New pre snapshot with number ${pre}\n"
            sudo pacman -U --noconfirm $(find $builddir -type f -regex  ".*\.pkg\.\(tar\|tar\.[gx]z\)" ) && msg "Packages upgraded\n" || return 1
            msg "Taking post snapshot\n"
            post=$(snapper create --type=post --cleanup-algorithm=number --print-number --pre-number="$pre") # Take post snapshot and store number in $post
            msg "Snapshot block complete: $snpr_cnfg/${pre}..${post}\n"
            echo -e "\nAUR packages upgraded: \n\n$aurpkgs" | sudo tee -a $log_file > /dev/null
            eval "in_block=0"
            return 0
        else
            return 2
        fi
    #else
    #    return 1
    #fi
}
rollback(){
    PS3="Choice: "
    clear
    menu(){
    echo "What do you want to rollback?"
    select rollback_type in 'Timeline snapshot' 'Upgrade' 'Quit'; do
        case $rollback_type in 
    
        'Upgrade')
            clear
            snapper list --type pre-post | awk -F\| '{print $1"|" $3 "|" $5}'| sed '1,3d' #Show a list of all pre-post snapshots 
            echo -en "\nNumber of the snapshot you like to return to: " 
            read past
            sudo snapper -v undochange $past..$((past+1)) #Undo the changes from $pre and the one right after it
            ;;
    
        'Timeline snapshot')
            clear
            snapper list --type single | awk -F\| '{print $1"|" $2}'| sed '1,3d' #Show a list of all single snapshots 
            echo -en "\nNumber of the snapshot you like to return to: " 
            read past
            sudo snapper -v undochange $past..0 #Undo change from sekected snapshot to now
            ;; 
        'Quit') exit 0
        esac
        read -p "All done, press [ENTER] to go back to the menu or Ctrl-C to exit"
        clear
        menu
    done
    }
menu
}

fscheck
while getopts "bhar" OPT; do
   case "${OPT}" in
       a) aur=1;;
       h) echo -e $helpmsg; exit 0;;
       b) boot=2;;
       r) rollback;;
       *) msg "Unrecognized argument\n"; echo -e $helpmsg; exit 1; ;;
   esac
done
 
[[ !  -d "$log_path" ]] && sudo mkdir -p $log_path # If log directory does not exist, create it

quit() { # Run cleanup code upon exit or error
    if [[ "$in_block" = "1" ]]; then
        msg "WARNING: Aborting from pre/post snapshot block Do you want to remove pre snapshot ${pre}? [Y/n]: "
        read remshot
        case $remshot in 
            ""|[Yy]|[Yy][Ee][Ss])sudo snapper delete $pre; msg "Snapshot removed\n"; in_block=0; exit;; 
            [Nn]|[Nn][Oo]) msg "Okay. Leaving empty pre snapshot\n"; in_block=0 ;;
        esac 
    fi
} 
trap quit EXIT ERR 15 1 2

msg "Retrieving packages...\n"
sudo pacman -Syuw && msg "Done\n"  || exit 2 # Only pull down needed packages. Don't install

pkgs=$(package-query -SQuf "%n  %l  ->  %V\n")
if [[ -z $pkgs ]]; then
    if [[ $boot == 2 ]]; then
        bootbackup 
    fi 
    if [[ $aur == 1 ]]; then
        if aur; then
           msg "Done\n"
           exit 0  
       else
           exit $(echo $?)
        fi
    fi
    msg "Nothing to update. Aborting.\n" && exit 2
fi

if grep "linux-[0-9]" <(echo $pkgs);  then
    msg "Upgrade to the Linux kernel detected. Enabling backup of /boot\n"
    boot=1
fi

echo -e "Errors (if any) during upgrade:\n" | sudo tee -a $log_file > /dev/null
exec 2> >(sudo tee -a "$log_file" >&2)

bootbackup

in_block=1
pre=$(snapper create --type=pre --cleanup-algorithm=number --print-number --description="pacman -Syu") #Take snapshot and store snapshot number in $pre
msg "New pre snapshot with number ${pre}\n"
sudo pacman -Su --noconfirm # Upgrade packages
echo

post=$(snapper create --type=post --cleanup-algorithm=number --print-number --pre-number="$pre") # Take post snapshot and store number in $post
msg "Snapshot block complete: $snpr_cnfg/${pre}..${post}\n"
echo -e "\nPackages upgraded: \n\n$pkgs" | sudo tee -a $log_file > /dev/null
sudo sed -i '/Proceed with installation/d' $log_file 
in_block=0
bootbackup
if [[ $aur == 1 ]]; then
    aur && msg "Done\n" 
fi
