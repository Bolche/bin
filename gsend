#!/usr/bin/env bash
# Written by: crosroads1112
# Purpose: Easily adding, updating and removing files from a git repo
# NOTE: The -d flag assumes your git repos are subdirectories under your home directory (for example, mine are ~/bin and ~/.dotfiles). If this is not your desired behavior remove the ~/ from line 26. Then you may enter the absolute path of the git repo with the -d flag. If that doesn't suit your fancy, you may also just 'cd' into your git repo and forgo the -d flag entirely.
# 
#
#
#########################################
USAGE="gsend [OPTIONS] FILE COMMENT\n\nOPTIONS:\n [-h --help ]\t\tPrint this help message\n [-r --remove]\t\tRemove file from repo\n [-d --dir ]\t\tSpecify git repo locationi\n [-b --branch]\t\tSpecify branch"
remove=0
#branch=master

if [[ $# -lt 2 ]]; then
    echo "This script requres at least two arguments"
    echo -e $USAGE
    exit 1
fi

check(){
if [[ $? -ne 0 ]]; then
    echo "Sorry, an error occured. $1"
    exit 1
fi
}

send(){
if [[ $remove == 0 ]]; then
   git add $1
else
    git rm $1
fi

check "No such file in specified git repo"
shift
description=$@

git commit -m "$description"
git push origin $branch
exit 0
}

args(){
while [[ $(echo $1 | head -c 1) == "-" ]]; do
    case $1 in 
        -h|--help) echo -e "$USAGE"
            exit 0
            ;;
        -r|--remove) eval "remove=1"
            shift
            ;;
        -d|--dir) cd ~/$2
            check "No such directory"
            test -d ./.git 
            check "No git repository exists in this directory"
            shift 2
            ;;
        -b|--branch) eval "branch=$2"
            shift 2
            ;;
        -*) echo "Unrecognized argument: $1"
            echo -e $USAGE
            exit 1
            ;;
    esac
done
send $@
}


args $@
